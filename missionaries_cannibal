from collections import deque

def is_valid(state):
    m_left, c_left, m_right, c_right, _ = state
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if m_left > 0 and m_left < c_left:
        return False
    if m_right > 0 and m_right < c_right:
        return False
    return True

def successors(state):
    m_left, c_left, m_right, c_right, boat = state
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
    results = []

    for m, c in moves:
        if boat == "left":
            new_state = (m_left - m, c_left - c, m_right + m, c_right + c, "right")
        else:
            new_state = (m_left + m, c_left + c, m_right - m, c_right - c, "left")
        
        if is_valid(new_state):
            results.append(new_state)
    
    return results

def solve_missionaries_cannibals():
    initial_state = (3, 3, 0, 0, "left")
    goal_state = (0, 0, 3, 3, "right")
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        state, path = queue.popleft()
        if state in visited:
            continue
        visited.add(state)
        path = path + [state]
        if state == goal_state:
            return path
        for successor in successors(state):
            queue.append((successor, path))
    return None

solution = solve_missionaries_cannibals()
if solution:
    print("Solution found:")
    for step in solution:
        print(step)
else:
    print("No solution found.")
