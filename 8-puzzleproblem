import heapq
GOAL_STATE=[[1,2,3],[4,5,6],[7,8,0]]
def find_index(state,tile):
    for i,row in enumerate(state):
        if tile in row:return i,row.index(tile)
def manhattan_distance(state):
    distance=0
    for i in range(3):
        for j in range(3):
            tile=state[i][j]
            if tile!=0:
                goal_x,goal_y=find_index(GOAL_STATE,tile)
                distance+=abs(goal_x-i)+abs(goal_y-j)
    return distance
def get_neighbors(state):
    x,y=find_index(state,0)
    moves=[]
    directions=[(-1,0),(1,0),(0,-1),(0,1)]
    for dx,dy in directions:
        nx,ny=x+dx,y+dy
        if 0<=nx<3 and 0<=ny<3:
            new_state=[row[:]for row in state]
            new_state[x][y],new_state[nx][ny]=new_state[nx][ny],new_state[x][y]
            moves.append(new_state)
    return moves
def solve_puzzle(start_state):
    priority_queue=[]
    heapq.heappush(priority_queue,(0,start_state,[]))
    visited=set()
    while priority_queue:
        cost,current_state,path=heapq.heappop(priority_queue)
        if current_state==GOAL_STATE:return path+[current_state]
        state_tuple=tuple(tuple(row)for row in current_state)
        if state_tuple in visited:continue
        visited.add(state_tuple)
        for neighbor in get_neighbors(current_state):
            new_path=path+[current_state]
            heapq.heappush(priority_queue,(len(new_path)+manhattan_distance(neighbor),neighbor,new_path))
    return None
def display_state(state):
    for row in state:print(' '.join(str(tile)if tile!=0 else' 'for tile in row))
    print()
initial_state=[[1,2,3],[4,0,5],[7,8,6]]
solution=solve_puzzle(initial_state)
if solution:
    print("Solution found in {} steps:".format(len(solution)-1))
    for step,state in enumerate(solution):
        print(f"Step {step}:")
        display_state(state)
else:print("No solution found!")
