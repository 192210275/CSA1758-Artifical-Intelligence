def is_valid(assignment, region, color, graph):
    for neighbor in graph[region]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True
def backtrack(assignment, graph, colors):
    if len(assignment) == len(graph):
        return assignment
    region = next(r for r in graph if r not in assignment)  
    for color in colors:
        if is_valid(assignment, region, color, graph):
            assignment[region] = color
            result = backtrack(assignment, graph, colors)
            if result:
                return result
            del assignment[region]
    return None
def map_coloring(graph, colors):
    assignment = {}
    return backtrack(assignment, graph, colors)
graph = {
    'A': ['B', 'C', 'D'],
    'B': ['A', 'C', 'E'],
    'C': ['A', 'B', 'D', 'E'],
    'D': ['A', 'C'],
    'E': ['B', 'C']
}
colors = ['Red', 'Green', 'Blue']
solution = map_coloring(graph, colors)
print("Solution:", solution)
